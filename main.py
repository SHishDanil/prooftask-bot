import os
import logging
import uuid
from decimal import Decimal
from threading import Thread

import stripe
from flask import Flask, request, jsonify

from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# =========================
#  –ù–∞—Å—Ç—Ä–æ–π–∫–∏/–∫–ª—é—á–∏ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# =========================
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
STRIPE_SECRET_KEY  = os.getenv("STRIPE_SECRET_KEY", "").strip()   # sk_test_...
STRIPE_WEBHOOK_SECRET = os.getenv("STRIPE_WEBHOOK_SECRET", "").strip()  # whsec_... (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

if not TELEGRAM_BOT_TOKEN:
    raise SystemExit("TELEGRAM_BOT_TOKEN is not set")
if not STRIPE_SECRET_KEY:
    raise SystemExit("STRIPE_SECRET_KEY is not set")

stripe.api_key = STRIPE_SECRET_KEY

# =========================
#  –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# =========================
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
)
log = logging.getLogger("prooftask")

# =========================
#  –ü–∞–º—è—Ç—å –∑–∞–¥–∞—á (in‚Äëmemory)
#  tid -> {"pi_id": str, "status": "new|authorized|captured|failed"}
# =========================
TASKS: dict[str, dict] = {}

# =========================
#  Flask (–∑–¥–æ—Ä–æ–≤—å–µ + –≤–µ–±—Ö—É–∫ Stripe)
# =========================
app = Flask(__name__)

@app.get("/")
def health():
    return "OK", 200

@app.post("/webhook/stripe")
def stripe_webhook():
    payload = request.data
    sig_header = request.headers.get("Stripe-Signature", "")

    try:
        if STRIPE_WEBHOOK_SECRET:
            event = stripe.Webhook.construct_event(payload, sig_header, STRIPE_WEBHOOK_SECRET)
        else:
            event = request.get_json(force=True, silent=True) or {}
    except Exception as e:
        log.warning("Stripe webhook verify failed: %s", e)
        return jsonify({"ok": False}), 400

    etype = event.get("type")
    data = event.get("data", {}).get("object", {}) if isinstance(event, dict) else {}
    metadata = data.get("metadata", {}) if isinstance(data, dict) else {}

    tid = metadata.get("task_id")
    pi_id = data.get("id")

    if etype == "payment_intent.amount_capturable_updated":
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (—Ö–æ–ª–¥) –ø—Ä–æ—à–ª–∞
        if tid and tid in TASKS:
            TASKS[tid]["status"] = "authorized"
        log.info("PI %s authorized (capturable updated), task=%s", pi_id, tid)

    elif etype == "payment_intent.succeeded":
        if tid and tid in TASKS:
            TASKS[tid]["status"] = "captured"
        log.info("PI %s captured (succeeded), task=%s", pi_id, tid)

    elif etype == "payment_intent.payment_failed":
        if tid and tid in TASKS:
            TASKS[tid]["status"] = "failed"
        log.info("PI %s failed, task=%s", pi_id, tid)

    else:
        log.info("Unhandled Stripe event: %s", etype)

    return jsonify({"ok": True}), 200


def run_flask():
    # Render —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç 10000 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    port = int(os.getenv("PORT", "10000"))
    app.run(host="0.0.0.0", port=port, debug=False)


# =========================
#  Telegram-–∫–æ–º–∞–Ω–¥—ã
# =========================
HELP_TEXT = (
    "–ö–æ–º–∞–Ω–¥—ã:\n"
    "/task <usd> <–æ–ø–∏—Å–∞–Ω–∏–µ> ‚Äî —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏ –Ω–∞ —Ö–æ–ª–¥\n"
    "/status <task_id>      ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å\n"
    "/release <task_id>     ‚Äî –∑–∞—Ö–≤–∞—Ç–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞\n\n"
    "–ü—Ä–∏–º–µ—Ä: /task 1 Test"
)

async def cmd_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –∂–∏–≤–æ–π üòä\n\n" + HELP_TEXT)

async def cmd_task(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not ctx.args:
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /task <usd> <–æ–ø–∏—Å–∞–Ω–∏–µ>")

    # 1) –ü–∞—Ä—Å–∏–º —Å—É–º–º—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
    try:
        amount_usd = Decimal(ctx.args[0])
    except Exception:
        return await update.message.reply_text("–ü–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç ‚Äî —Å—É–º–º–∞ –≤ USD. –ü—Ä–∏–º–µ—Ä: /task 1 Test")

    desc = " ".join(ctx.args[1:]).strip() or "Task"
    amount_cents = int(amount_usd * 100)

    # 2) –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º task_id
    tid = uuid.uuid4().hex[:8]

    # 3) –°–æ–∑–¥–∞—ë–º PaymentIntent —Å manual capture –∏ –°–†–ê–ó–£ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–π –∫–∞—Ä—Ç–æ–π
    #    –≠—Ç–æ –∏–∑–±–∞–≤–ª—è–µ—Ç –æ—Ç —Ä—É—á–Ω–æ–≥–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –≤ Dashboard.
    try:
        pi = stripe.PaymentIntent.create(
            amount=amount_cents,
            currency="usd",
            capture_method="manual",       # —Ö–æ–ª–¥
            confirm=True,                  # —Å—Ä–∞–∑—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º
            payment_method="pm_card_visa", # —Ç–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞ Stripe
            description=desc,
            metadata={"task_id": tid},
        )
    except Exception as e:
        log.exception("create PI failed")
        return await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")

    # 4) –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ—Ç–≤–µ—á–∞–µ–º
    TASKS[tid] = {"pi_id": pi["id"], "status": "authorized"}
    text = (
        f"‚úÖ –ó–∞–¥–∞—á–∞ {tid} —Å–æ–∑–¥–∞–Ω–∞. PI {pi['id']} (hold authorized).\n\n"
        f"–î–∞–ª–µ–µ –ø—Ä–∏—à–ª–∏—Ç–µ: /release {tid} ‚Äî –∑–∞—Ö–≤–∞—Ç–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞."
    )
    await update.message.reply_text(text)

async def cmd_status(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not ctx.args:
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /status <task_id>")

    tid = ctx.args[0].strip()
    t = TASKS.get(tid)
    if not t:
        return await update.message.reply_text("–ù–µ –Ω–∞–π–¥–µ–Ω–æ")

    try:
        pi = stripe.PaymentIntent.retrieve(t["pi_id"])
        status = pi.get("status")
        capturable = pi.get("amount_capturable", 0)
        captured = pi.get("amount_received", 0)
    except Exception as e:
        return await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")

    await update.message.reply_text(
        f"–°—Ç–∞—Ç—É—Å PI: {status}\n"
        f"Capturable: {capturable}¬¢, Received: {captured}¬¢\n"
        f"–õ–æ–∫–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {t.get('status')}"
    )

async def cmd_release(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not ctx.args:
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /release <task_id>")

    tid = ctx.args[0].strip()
    t = TASKS.get(tid)
    if not t:
        return await update.message.reply_text("–ù–µ –Ω–∞–π–¥–µ–Ω–æ")

    try:
        stripe.PaymentIntent.capture(t["pi_id"])
    except Exception as e:
        log.exception("capture failed")
        return await update.message.reply_text(f"–û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞: {e}")

    TASKS[tid]["status"] = "captured"
    await update.message.reply_text("‚úÖ –ó–∞—Ö–≤–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ‚Äî –∂–¥—ë–º succeeded")

# =========================
#  –ó–∞–ø—É—Å–∫
# =========================
def run_bot():
    app_ = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    app_.add_handler(CommandHandler("start",  cmd_start))
    app_.add_handler(CommandHandler("task",   cmd_task))
    app_.add_handler(CommandHandler("status", cmd_status))
    app_.add_handler(CommandHandler("release",cmd_release))

    # –í–∞–∂–Ω–æ: —É–Ω–∏–∫–∞–ª—å–Ω—ã–π polling, –±–µ–∑ –≤—Ç–æ—Ä–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
    app_.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    # Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ (–¥–ª—è –≤–µ–±—Ö—É–∫–∞/health)
    Thread(target=run_flask, daemon=True).start()
    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç
    run_bot()
